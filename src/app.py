import streamlit as st
import sqlite3
from main import run_license_plate_recognition
import os
import cv2
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Database setup
conn = sqlite3.connect('license_plates.db')
c = conn.cursor()
c.execute('''
    CREATE TABLE IF NOT EXISTS plates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        plate_number TEXT UNIQUE,
        full_name TEXT,
        address TEXT
    )
''')
conn.commit()

# Page configuration
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ—Å. —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤",
    page_icon="üöó",
    layout="wide",
)

# Display project information
st.title("–ú–æ–¥–µ–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤")
st.subheader("–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: –°–ü–ë–ì–£–¢ –∏–º. –ë–æ–Ω—á-–ë—Ä—É–µ–≤–∏—á–∞")
st.write("**–ö–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:** 09.03.04")
st.write("**–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:** –ë–∏—Ä—é–∫–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á")
st.write("**–ì—Ä—É–ø–ø–∞:** –ò–ö–ü–ò-06")
st.write("**–§–ò–û:** –ê—Ä—Ç–∞–º–æ–Ω–æ–≤ –ï–≥–æ—Ä –ê–Ω–¥—Ä–µ–µ–≤–∏—á")

# Initialize session state for form inputs
if 'plate_number' not in st.session_state:
    st.session_state['plate_number'] = ''
if 'full_name' not in st.session_state:
    st.session_state['full_name'] = ''
if 'address' not in st.session_state:
    st.session_state['address'] = ''
if 'save_success' not in st.session_state:
    st.session_state['save_success'] = False

# Main application
def app():
    st.header("–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤")
    st.subheader("Powered by YOLOv5")
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", type=["png", "jpg", "jpeg", "mp4"], accept_multiple_files=False)
    if uploaded_file is not None:
        # Create directory if it doesn't exist
        if not os.path.exists("temp"):
            os.makedirs("temp")

        # Save uploaded file
        save_path = os.path.join("temp", uploaded_file.name)
        with open(save_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # Process image here (e.g., display or analyze image)
        st.image(save_path)
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª"):
            # Add spinner
            with st.spinner(text="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Å –Ω–æ–º–µ—Ä–∞ ..."):
                recognizer = run_license_plate_recognition(save_path)
                text = recognizer.recognize_text()
                st.write(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")  # Debug output
                if text:
                    trimmed_string = text.strip()
                    st.session_state['plate_number'] = trimmed_string
                    st.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –≥–æ—Å. –Ω–æ–º–µ—Ä: {trimmed_string}")

                    # Check database for existing plate number
                    c.execute("SELECT full_name, address FROM plates WHERE plate_number=?", (trimmed_string,))
                    result = c.fetchone()
                    if result:
                        st.write(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ: –§–ò–û - {result[0]}, –ê–¥—Ä–µ—Å - {result[1]}")
                    else:
                        st.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ:")

    if st.session_state['plate_number']:
        with st.form(key='new_data_form'):
            st.write(f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {st.session_state['plate_number']}")
            full_name = st.text_input("–§–ò–û", value=st.session_state['full_name'])
            address = st.text_input("–ê–¥—Ä–µ—Å", value=st.session_state['address'])
            submit_new_data = st.form_submit_button(label='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
            if submit_new_data:
                if full_name and address:
                    try:
                        c.execute("INSERT INTO plates (plate_number, full_name, address) VALUES (?, ?, ?)",
                                  (st.session_state['plate_number'], full_name, address))
                        conn.commit()
                        st.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                        # Reset session state
                        st.session_state['plate_number'] = ''
                        st.session_state['full_name'] = ''
                        st.session_state['address'] = ''
                        st.session_state['save_success'] = True
                    except sqlite3.Error as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.")

    if st.session_state['save_success']:
        st.success("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        st.session_state['save_success'] = False

if __name__ == "__main__":
    app()
